```{r}
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(sf))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(viridis))
suppressPackageStartupMessages(library(maps))
```



```{r}
filtered <- read_rds("dataset/police_interaction.rds")
```


```{r}

create_barplot <- function(data, col_name) {
  ggplot(data, aes_string(x = col_name)) +
    geom_bar(fill = "skyblue", color = "black") +
    labs(title = paste("Barplot of", col_name),
         x = col_name,
         y = "Count") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
reason_key = c("Out of universe/missing", "Accident", "Traffic stop-driver", "Traffic stop-passenger", "Rsp reported crime", "Police assistance", "Police investigation", "Police suspected rsp", "Other reason")
filtered |>
  group_by(RACE) |>
  mutate(
    reason_text = reason_key[REASON + 1] 
  ) |>
  ggplot(aes(x = REASON, fill = reason_text)) +
    geom_bar(show.legend = TRUE) +
    theme_minimal() +
  facet_wrap(~RACE) 

reason_key = c("Accident", "Traffic stop-driver", "Traffic stop-passenger", "Rsp reported crime", "Police assistance", "Police investigation", "Police suspected rsp", "Other reason")
# filtered_reason <- filtered %>%
#  count(RACE , wt = reason_key, name = "ny")
# filtered |>
#   group_by(RACE) |>
#   filter(REASON > 0) |>
#   mutate(
#     reason_text = reason_key[REASON + 1] 
#   ) |>
#   ggplot(aes(x = REASON, fill = reason_text)) +
#     geom_bar(show.legend = TRUE) +
#     theme_minimal() +
#   facet_wrap(~RACE) 
filtered |>
  filter(REASON > 0) |>
ggplot(aes(x = as.factor(REASON), fill = as.factor(RACE)))+
  geom_bar(position = "fill") + 
  labs(title = "Proportion of Reasons for Traffic Stop by Race", x = "Reason: \n1 = Accident\n2 = Traffic stop-driver\n3 = Traffic stop-passenger\n4 = Rsp reported crime\n5 = Police assistance\n6 = Police investigation\n7 = Police suspected rsp\n8 = Other reason", y = "Proportion", fill = "Race") 
  #scale_fill_discrete(name = "Race")

 # ggplot(aes(x = REASON, y = after_stat(prop), fill = reason_text, group = reason_text)) +
 #    geom_bar(show.legend = TRUE, color = "black", position = "dodge") +
 #    theme_minimal() +
#  theme(legend = element_text("Reason for traffic stop"))


  #theme(legend.title = element_text(hjust = 1))

filtered |>
  filter(REASON > 0) |>
  ggplot(aes(x = RACE, fill = as.factor(REASON))) +
  geom_bar(position = "fill") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Proportion of Reasons for Traffic Stop by Race")
```


```{r}
filtered |>
  filter(!is.na(ARRESTED)) |>
  ggplot(aes(x = as.factor(RACE), fill = as.factor(ARRESTED))) +
    geom_bar(position = "fill") +
    labs(title = "Proportion of Arrests by Race", x = "Race", y = "Arrested (0 = No, 1 = Yes)", fill = "Arrested")

filtered |>
  filter(!is.na(ARRESTED)) |>
  group_by(RACE) |>
  summarize(
    arrest_proportion = sum(ARRESTED = 1) / n()
  ) |>
  ggplot(aes(x = RACE, y = arrest_proportion, fill = RACE)) +
  geom_bar(stat = "identity") + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```


```{r}

ggplot(filtered, aes(x = as.factor(RACE), fill = as.factor(CONTACT))) +
  geom_bar(position = "fill") +
  labs(title = "Proportion of Race by Police Contact", x = "Race", y = "Police Contact", fill = "Police Contact") +
  scale_x_discrete(labels = c("0" = "No", "1" = "Yes")) +
  scale_y_continuous(labels = scales::percent)
```


```{r}

ggplot(filtered, aes(x = as.factor(C_CONTCT), fill = as.factor(RACE))) +
  geom_bar(position = "fill") +
  labs(title = "Proportion of Contact Type by Race", x = "Contact Type", y = "Proportion", fill = "Race") +
  scale_x_discrete(labels = c("0" = "No contact", 
                              "1" = "Citizen-initiated contact", 
                              "2" = "Vehicle stop", 
                              "3" = "Suspect-related contact", 
                              "4" = "Other police contact")) +
  scale_y_continuous(labels = scales::percent)



```


```{r}
library(tidymodels)
split <- initial_split(filtered, prop = .8) #good way to keep yourself honest. splits it by prop % being in training, 1-prop being test
training<- training(split)
testing <- testing(split)
predict_filtered <- training |>
  filter(!is.na(ARRESTED) & !is.na(RACE) & !is.na(EDUCATION) & !is.na(HHPOV) & !is.na(MALE))

mod1 <- lm(ARRESTED ~ RACE + EDUCATION + HHPOV + MALE, predict_filtered)
summary(mod1)
plot(mod1)

predict_filtered_test <- testing |>
  filter(!is.na(ARRESTED) & !is.na(RACE) & !is.na(EDUCATION) & !is.na(HHPOV) & !is.na(MALE))

mod2 <- lm(ARRESTED ~ RACE + EDUCATION + HHPOV + MALE, predict_filtered_test)
summary(mod2)
plot(mod2)
# predict_filtered <- filtered |>
#   filter(!is.na(ARRESTED) & !is.na(HHPOV) & !is.na(MALE))
# 
# mod2 <- lm(ARRESTED ~ HHPOV + MALE, predict_filtered)
# summary(mod2)
# plot(mod2)
# predict_filtered <- filtered |>
#   filter(!is.na(ARRESTED) & !is.na(RACE))
# 
# mod2 <- lm(ARRESTED ~ RACE, predict_filtered)
# summary(mod2)
# plot(mod2)
# filtered |>
#   # ggplot(aes(x = C4_RACE, y = PROPER)) +
#   # geom_quantile()
#   
#   ggplot(aes(x = C4_RACE, y = PROPER)) +
#   geom_
```
```{r}
broom::augment(mod1)
ggplot(mod1, aes(x = .fitted, y=.resid)) +
  geom_point(alpha = 0.3) +
  geom_smooth()
ggplot(mod1, aes(sample = rstandard(mod1))) +
  geom_qq() + 
  stat_qq_line()
```

``` {r}
library(tidyverse)
library(reshape2)

# Categorizing variables based on their types
#removed "CONTACT" and "ERROR" due to "Warning in cor(numeric_data, use = "complete.obs") : the standard deviation is zero" error
binary_columns <- c("MALE", "WORK_LW", "HHPOV", "PUB_HOUSE",   "PUB_HOUSE_SUB", "REGION", "INPERSON", "VICAR_CITIZEN", "VICAR_PRO_AUTO", "VICAR_PRO_PERS", "VICAR_OTH_CONT", "VICAR_IMPROPER", "D_HH_P23", "PROPER")

ordinal_columns <- c("C4_RACE", "MAR_STAT", "FREQ_DRV", "TENURE",  "MSA_STATUS")

continuous_columns <- c("AGE", "EDUCATION", "EDUCATION_SUB", "NUM_MOVES", "NUM_CONT", "HH_SIZE", "PPCS_YEAR", "N_HH_P1", "N_PERS_P1", "NUM_CITIZEN_HH", "NUM_PRO_AUTO_HH", "NUM_PRO_PERS_HH", "NUM_OTH_CONT_HH", "NUM_IMPROPER_HH")

# Selecting data by type
binary_data <- filtered %>%
  select(all_of(binary_columns)) %>%
  select(where(is.numeric))

ordinal_data <- filtered %>%
  select(all_of(ordinal_columns)) %>%
  select(where(is.numeric))

continuous_data <- filtered %>%
  select(all_of(continuous_columns)) %>%
  select(where(is.numeric))

# Calculating correlation matrices with appropriate methods
cor_binary <- cor(binary_data, use = "pairwise.complete.obs", method = "pearson")
cor_ordinal <- cor(ordinal_data, use = "pairwise.complete.obs", method = "spearman")
cor_continuous <- cor(continuous_data, use = "pairwise.complete.obs", method = "pearson")

# Creating a heatmap function
plot_heatmap <- function(cor_matrix, title) {
  cor_melted <- melt(cor_matrix)
  ggplot(cor_melted, aes(Var1, Var2, fill = value)) +
    geom_tile(color = "white") +
    scale_fill_gradient2(low = "blue", high = "red", mid = "white",
                         midpoint = 0, limit = c(-1, 1), name = "Correlation") +
    labs(title = title, x = "Variables", y = "Variables") +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 90, hjust = 1),
          axis.text.y = element_text(angle = 0, vjust = 1))
}

# Plotting heatmaps for each correlation matrix
if (ncol(binary_data) > 1) {
  print(plot_heatmap(cor_binary, "Correlation Heatmap of Binary Variables"))
}

if (ncol(ordinal_data) > 1) {
  print(plot_heatmap(cor_ordinal, "Correlation Heatmap of Ordinal Variables"))
}

if (ncol(continuous_data) > 1) {
  print(plot_heatmap(cor_continuous, "Correlation Heatmap of Continuous Variables"))
}

```


Plot of the marriage data for different races
``` {r}
marriageData <- filtered |>
  filter(!is.na(MAR_STAT)) |>
  group_by(RACE) |>
  mutate(totalPerRace = n()) |>
  ungroup() |>
  group_by(RACE, MAR_STAT) |>
  select(RACE, MAR_STAT, totalPerRace) |>
  mutate(numPerMarStatRace = n()) |>
  filter(row_number()==1) |>
  mutate(prop = numPerMarStatRace/totalPerRace) |>
  select(-totalPerRace, -numPerMarStatRace) |>
  mutate(MAR_STAT = as.factor(MAR_STAT))

ggplot(data = marriageData) +
  geom_bar(mapping = aes(x = RACE, fill = MAR_STAT, y = prop),
           stat = "identity",
           position = "dodge")
```

```{r}
firearm_data <- read_rds("dataset/firearm_sh_ds.rds")
```


Working on basic EDA for Second Dataset
```{r}
firearm_data <- firearm_data |>
  mutate(firearm_homicide_rate = as.numeric(firearm_homicide_rate),
         state = tolower(state)) |>
  filter(!is.na(firearm_homicide_rate))

us_states <- map_data("state") |>
  as_tibble() |>
  st_as_sf(coords = c("long", "lat"), crs = 4326) |>
  group_by(region) |>
  summarise(geometry = st_union(geometry)) |>
  st_transform(crs = 5070)

us_states <- us_states |>
  st_cast("POLYGON")

map_data <- us_states |>
  rename(state = region) |>
  left_join(firearm_data, by = "state")

colnames(map_data)

map_data$log_firearm_homicide_rate <- log(map_data$firearm_homicide_rate + 1)

ggplot(map_data) +
  geom_sf(aes(fill = log_firearm_homicide_rate), color = "black", size = 0.2) +
  scale_fill_viridis_c(option = "plasma", name = "Homicide Rate") +
  theme_minimal() +
  labs(
    title = "Firearm Homicide Rate by State",
    fill = "Rate"
  ) +
  facet_wrap(~year)

```

